<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	<display-name>J2EEFramework</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	<!-- 配置log4j配置文件的路径，可以是xml或 properties文件（此参数必须配） -->
	<!--<context-param> <param-name>log4jConfigLocation</param-name> <param-value>WEB-INF/log4j.properties</param-value> 
		</context-param> -->
	<!-- 每隔多少毫秒扫描一下配置文件的变化（此参数可选配） -->
	<!--<context-param> <param-name>log4jRefreshInterval</param-name> <param-value>60000</param-value> 
		</context-param> -->

	<!-- spring框架默认定义webAppRootKey的值为webapp.root，若不配此参数默认值就是webapp.root（因此，此参数可选配） -->
	<!-- The definition of the Root Spring Container shared by all Servlets 
		and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webName.root</param-value>
	</context-param>

	<!-- spring profile -->
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>entityManagerFactory</param-value>
	</context-param>

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>  
            <param-name>forceEncoding</param-name>  
            <param-value>true</param-value>  
        </init-param> 
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- shiro configuration -->
	<!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter> -->
	<!-- Make sure any request you want accessible to Shiro is filtered. /*  catches all -->
	<!-- requests. Usually this filter mapping is defined first (before all  others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain: -->
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--<filter>
	  	<filter-name>struts2</filter-name>
	  	<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>

	<filter-mapping>
	  	<filter-name>struts2</filter-name>
	   	<url-pattern>/*</url-pattern>
	</filter-mapping> -->
	
	<!-- <listener> -->
	<!--		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> -->
	<!--	</listener> -->
	<!--<filter> -->
	<!--	<filter-name>sitemesh</filter-name> -->
	<!--	<filter-class> com.opensymphony.module.sitemesh.filter.PageFilter</filter-class> -->
	<!--</filter> -->
	<!--<filter-mapping> -->
	<!--	<filter-name>sitemesh</filter-name> -->
	<!--	<url-pattern>/*.jsp</url-pattern> -->
	<!--</filter-mapping> -->
	
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/servlet/springmvc-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>ViewStatusMessages</servlet-name>
		<servlet-class>ch.qos.logback.classic.ViewStatusMessagesServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ViewStatusMessages</servlet-name>
		<url-pattern>/lbClassicStatus</url-pattern>
	</servlet-mapping>
	<!-- 出错页面定义 -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/WEB-INF/views/error/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/error/500.jsp</location>
	</error-page>
</web-app>