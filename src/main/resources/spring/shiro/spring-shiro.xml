<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
	<bean id="myAuthenFilter" class="com.joonje.security.CaptchaFormAuthenticationFilter" />
	<bean id="captchaFilter" class="com.joonje.security.CaptchaFilter">
		<property name="enable" value="true"/>
		<property name="captchaParam" value="captcha"/>
	</bean>
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: -->
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/" />
		<property name="unauthorizedUrl" value="/error" />
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean -->
		<!-- defined will be automatically acquired and available via its beanName in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
		<property name="filters">
		 <util:map> 
		 	<entry key="authc" value-ref="myAuthenFilter"/>
		 	<entry key="captcha" value-ref="captchaFilter"/>
		 </util:map> 
		</property> 
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				/login = captcha,authc
				/login/captcha = anon
				/js/** = anon
				/logout = logout
				/resources/**=anon
				#/error = anon
				
				/** = authc
				#/admin/** = authc,
				#roles[admin]
				#/docs/** = authc,
				#perms[document:read]
				#/** = authc
				# more URL-to-FilterChain
				#definitions here
			</value>
		</property>
	</bean>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details. <bean id="someFilter" 
		class="..." /> <bean id="anotherFilter" class="..."> ... </bean> ... -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
		<property name="cacheManager" ref="cacheManager" />
		<property name="realm" ref="myRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment this line to use shiro's native 
			sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- Set a net.sf.ehcache.CacheManager instance here if you already have one. If not, a new one will 
			be creaed with a default config: <property name="cacheManager" ref="ehCacheManager"/> -->
		<!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want a specific 
			Ehcache configuration to be used, specify that here. If you don't, a default will be used.: <property 
			name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/> -->
	</bean>
	
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1024"/>
        <property name="storedCredentialsHexEncoded" value="false"/>
	</bean>
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="com.joonje.security.MyJDBCRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
	</bean>
		
		<!-- <property name="userService" ref="userService" /> -->
</beans>
